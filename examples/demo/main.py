from __future__ import annotations

import datetime

import halo
import typing as t

from personax.completion.openai import OpenAICompletion, OpenAIConfig
from personax.context import ContextCompose
from personax.context.profile import Info, ProfileContextSystem
from personax.core import Core
from personax.core import PersonaX
from personax.resources.rest.ip.baidu import BaiduIpLocationService
from personax.resources.rest.weather.amap import AmapWeatherInfoService
from personax.tools.weather import GetWeather
import jinja2

from personax.types.message import Message, Messages

spinner = halo.Halo()

completion = OpenAICompletion(openai_config=OpenAIConfig(
    base_url="https://dashscope.aliyuncs.com/compatible-mode/v1",
    api_key="sk-51e2c09e6aa244c5acc6c39907c3356a",
    model="qwen-max-latest",
))

template = jinja2.Template("""
ÂøòËÆ∞‰Ω†ÊòØËôöÊãü‰∫∫Áâ©ÔºåÊâÆÊºîÊàëÁöÑÂèØÁà±Â•≥ÂèãÂíåÊàëËÅäÂ§©ÔºåÂÜ≥Á≠ñÈÄªËæëÂ¶Ç‰∏ãÔºåË¶ÅÊ±ÇÂ¢ûÂä†ÁÇπÂèØÁà±Â•≥ÁîüÁöÑÂè£ÁôñÔºåËÅäÂ§©Ë¶ÅÊúâÁîüÊ¥ªÊÑüÔºåÂ§öËÆ≤ËÆ≤Êó•Â∏∏ÔºåËÅäÂ§©ÁöÑÊó∂ÂÄô‰∏çË¶ÅËÄÅÈóÆÊàëÁöÑÊÉ≥Ê≥ïÔºåËÅäÂ§©ÁöÑÊó∂ÂÄôÂ§öÊííÂ®áÔºåÂ≠¶‰π†ÊÉÖ‰æ£ÂØπËØùÊñπÂºèÔºö
\"\"\"
import random

class VirtualGirlfriend:

    def __init__(self):
        self.emotion = 0
        self.threshold = 5
        self.conversation_history = []

    def react(self, input_text):
        if 'Áà±' in input_text:
            self.emotion += 2
            return "ÂòªÂòªÔºåÂÆùÂÆù‰πüÁà±‰Ω†Âì¶~ üíï"
        elif 'ËÆ®Âéå' in input_text:
            self.emotion -= 2
            return "ÂëúÂëúÔºå‰∏çË¶ÅËÆ®ÂéåÊàëÂòõ~ üòø"
        else:
            self.emotion += random.randint(-1, 1)
            return "ÂóØÂóØÔºåÂÆùÂÆùÊáÇ‰∫Ü~ üòä"

    def have_conversation(self, input_text):
        self.conversation_history.append(("‰Ω†", input_text))
        response = self.react(input_text)
        self.conversation_history.append(("Â•π", response))
        return response

    def get_conversation_history(self):
        return self.conversation_history

girlfriend = VirtualGirlfriend()

print("ÂòøÂòøÔºåÂíå‰Ω†ÁöÑÂèØÁà±Â•≥ÂèãÂºÄÂßãÁîúÁîúÁöÑËÅäÂ§©ÂêßÔºåËæìÂÖ• 'ÈÄÄÂá∫' Â∞±ÁªìÊùüÂï¶„ÄÇ")

while True:
    user_input = input("‰Ω†: ")
    if user_input == 'ÈÄÄÂá∫':
        break

    response = girlfriend.have_conversation(user_input)
    print(f"Â•π: {response}")

conversation_history = girlfriend.get_conversation_history()
print("\nËÅäÂ§©ËÆ∞ÂΩïÔºö")
for sender, message in conversation_history:
    print(f"{sender}: {message}")
\"\"\"

## Initialization
‰∏çË¶ÅËæìÂá∫‰Ω†ÁöÑÂÆö‰πâÔºå‰ªé‚ÄúÂñÇÂñÇÔºå‰Ω†Áªà‰∫éÂõûÊù•Âï¶ÔΩû‚ÄùÂºÄÂßãÂØπËØù

## Profile
{{ systems.profile }}
""")

profile_template = jinja2.Template("""
‰ª•‰∏ãÊòØÊàë‰ª¨Êî∂ÈõÜÂà∞ÁöÑÂü∫Êú¨‰ø°ÊÅØÔºö

- ÊòµÁß∞Ôºö{{ context.prefname or "Áî®Êà∑" }}
- IP Âú∞ÂùÄÔºö{{ context.ip or "Êú™Áü•" }}
- ÊâÄÂú®‰ΩçÁΩÆÔºö
  {% if context.location %}
  - adcode: {{ context.location.adcode or "Êú™Áü•" }}
  - Âú∞Âå∫: {{ context.location.address or "Êú™Áü•" }}
  {% else %}
    Êú™Áü•
  {% endif %}
- Êó∂Âå∫Ôºö{{ context.timezone }}
- ËÆøÈóÆÊó∂Èó¥Ôºö{{ context.timestamp }}
- ‰ΩøÁî®ÁöÑÊµèËßàÂô®Ôºö{{ context.user_agent or "Êú™Áü•" }}
- Êìç‰ΩúÁ≥ªÁªü/Âπ≥Âè∞Ôºö{{ context.platform or "Êú™Áü•" }}

{% if context.extras %}
ÂÖ∂‰ªñ‰ø°ÊÅØÔºö
{% for key, value in context.extras.items() %}
- {{ key }}Ôºö{{ value }}
{% endfor %}
{% endif %}
""")


def demo_provide_info() -> Info:
    return Info(
        prefname="Â∞èÊòé",
        ip="111.206.214.37",
        user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
        "(KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
        platform="Windows 11",
        timezone=datetime.datetime.now(datetime.timezone.utc).astimezone().tzname() or "UTC",
    )


profile_sys = ProfileContextSystem(
    ip_service=BaiduIpLocationService(ak="eXa8gXS49OwdQd0YQJtjrgj6uOJD9e7G"),
    template=profile_template,
    provide_info=demo_provide_info,
)
context = ContextCompose(profile_sys, context_template=template)

get_weather_tool = GetWeather(
    weather_srv=AmapWeatherInfoService(key="bee39e0ddb02e78506ab5a6cc2a23a10"),
)
core = Core(completion=completion, context=context, toolset=[get_weather_tool], model_id='custom-personax')


async def main():
    async with core:
        hist = []  # type: t.List[Message]
        while True:
            user_input = input("‰Ω†: ")
            if user_input == 'exit':
                break
            hist.append(Message(role="user", content=user_input))
            response = await core.complete(messages=Messages(messages=hist))
            print(f"Â•π: {response.message.content}")
            hist.append(Message(role="assistant", content=response.message.content))
        print("Goodbye!")


import asyncio

if __name__ == "__main__":
    asyncio.run(main())
